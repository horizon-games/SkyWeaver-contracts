/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { FactoryMock } from "./FactoryMock";

export class FactoryMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factoryManagerAddr: string,
    overrides?: TransactionOverrides
  ): Promise<FactoryMock> {
    return super.deploy(_factoryManagerAddr, overrides) as Promise<FactoryMock>;
  }
  getDeployTransaction(
    _factoryManagerAddr: string,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(_factoryManagerAddr, overrides);
  }
  attach(address: string): FactoryMock {
    return super.attach(address) as FactoryMock;
  }
  connect(signer: Signer): FactoryMockFactory {
    return super.connect(signer) as FactoryMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryMock {
    return new Contract(address, _abi, signerOrProvider) as FactoryMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryManagerAddr",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "batchMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161061c38038061061c8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556105b7806100656000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063731133e91461003b578063b48ab8b61461010c575b600080fd5b61010a6004803603608081101561005157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135916040820135919081019060808101606082013564010000000081111561009557600080fd5b8201836020820111156100a757600080fd5b803590602001918460018302840111640100000000831117156100c957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102d7945050505050565b005b61010a6004803603608081101561012257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561015a57600080fd5b82018360208201111561016c57600080fd5b8035906020019184602083028401116401000000008311171561018e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101de57600080fd5b8201836020820111156101f057600080fd5b8035906020019184602083028401116401000000008311171561021257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561026257600080fd5b82018360208201111561027457600080fd5b8035906020019184600183028401116401000000008311171561029657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103eb945050505050565b600080546040517f731133e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483019081526024830188905260448301879052608060648401908152865160848501528651929094169463731133e9948a948a948a948a9490939260a4019160208601918190849084905b8381101561037e578181015183820152602001610366565b50505050905090810190601f1680156103ab5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b5050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b48ab8b6858585856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104b557818101518382015260200161049d565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156104f45781810151838201526020016104dc565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015610530578181015183820152602001610518565b50505050905090810190601f16801561055d5780820380516001836020036101000a031916815260200191505b50975050505050505050600060405180830381600087803b1580156103cd57600080fdfea2646970667358221220417990479163a3ae0afee60493ea729840426b2e4806c5d916b1ad10a107a7f064736f6c63430006080033";
