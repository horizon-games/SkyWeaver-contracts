/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardFactoryInterface extends ethers.utils.Interface {
  functions: {
    "assignOwnership(address,uint256)": FunctionFragment;
    "batchMint(address,uint256[],uint256[],bytes)": FunctionFragment;
    "getAvailableSupply()": FunctionFragment;
    "getOwnerTier(address)": FunctionFragment;
    "livePeriod()": FunctionFragment;
    "periodMintLimit()": FunctionFragment;
    "skyweaverAssets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePeriodMintLimit(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assignOwnership",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "livePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodMintLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skyweaverAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriodMintLimit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "livePeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "skyweaverAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriodMintLimit",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipGranted(address,uint256,uint256)": EventFragment;
    "PeriodMintLimitChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodMintLimitChanged"): EventFragment;
}

export class RewardFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardFactoryInterface;

  functions: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchMint(address,uint256[],uint256[],bytes)"(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAvailableSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAvailableSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getOwnerTier(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    livePeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "livePeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    periodMintLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "periodMintLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    skyweaverAssets(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "skyweaverAssets()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePeriodMintLimit(uint256)"(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  assignOwnership(
    _address: string,
    _tier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "assignOwnership(address,uint256)"(
    _address: string,
    _tier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchMint(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchMint(address,uint256[],uint256[],bytes)"(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getAvailableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getOwnerTier(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  livePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "livePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  periodMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "periodMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  skyweaverAssets(overrides?: CallOverrides): Promise<string>;

  "skyweaverAssets()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePeriodMintLimit(
    _newPeriodMintLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePeriodMintLimit(uint256)"(
    _newPeriodMintLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "batchMint(address,uint256[],uint256[],bytes)"(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getAvailableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    livePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "livePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "periodMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    skyweaverAssets(overrides?: CallOverrides): Promise<string>;

    "skyweaverAssets()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePeriodMintLimit(uint256)"(
      _newPeriodMintLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipGranted(
      owner: string | null,
      previousTier: BigNumberish | null,
      newTier: BigNumberish | null
    ): EventFilter;

    PeriodMintLimitChanged(
      oldMintingLimit: null,
      newMintingLimit: null
    ): EventFilter;
  };

  estimateGas: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchMint(address,uint256[],uint256[],bytes)"(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getAvailableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    livePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "livePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "periodMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    skyweaverAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "skyweaverAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePeriodMintLimit(uint256)"(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchMint(address,uint256[],uint256[],bytes)"(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAvailableSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAvailableSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerTier(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    livePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "livePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodMintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodMintLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    skyweaverAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "skyweaverAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePeriodMintLimit(uint256)"(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
