/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DelayedOwnerInterface extends ethers.utils.Interface {
  functions: {
    "cancel(tuple)": FunctionFragment;
    "execute(tuple)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "isValidWitness(tuple)": FunctionFragment;
    "register(tuple)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txHashes(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidWitness",
    values: [
      {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "txHashes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidWitness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txHashes", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TransactionCancelled(tuple)": EventFragment;
    "TransactionExecuted(tuple)": EventFragment;
    "TransactionRegistered(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionRegistered"): EventFragment;
}

export class DelayedOwner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DelayedOwnerInterface;

  functions: {
    cancel(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isValidWitness(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      isValid: boolean;
      0: boolean;
    }>;

    "isValidWitness(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      isValid: boolean;
      0: boolean;
    }>;

    register(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    txHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "txHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  cancel(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(tuple)"(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(tuple)"(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  isValidWitness(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidWitness(tuple)"(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  register(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(tuple)"(
    _tx: {
      status: BigNumberish;
      triggerTime: BigNumberish;
      target: string;
      id: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  txHashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "txHashes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    cancel(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "cancel(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "execute(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    isValidWitness(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidWitness(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    register(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "register(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txHashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "txHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TransactionCancelled(transaction: null): EventFilter;

    TransactionExecuted(transaction: null): EventFilter;

    TransactionRegistered(transaction: null): EventFilter;
  };

  estimateGas: {
    cancel(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancel(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isValidWitness(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidWitness(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    txHashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "txHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidWitness(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidWitness(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(tuple)"(
      _tx: {
        status: BigNumberish;
        triggerTime: BigNumberish;
        target: string;
        id: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    txHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "txHashes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
