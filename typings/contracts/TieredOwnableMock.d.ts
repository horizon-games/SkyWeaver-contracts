/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TieredOwnableMockInterface extends ethers.utils.Interface {
  functions: {
    "anyone()": FunctionFragment;
    "assignOwnership(address,uint256)": FunctionFragment;
    "getOwnerTier(address)": FunctionFragment;
    "onlyMaxTier()": FunctionFragment;
    "onlyTierFive()": FunctionFragment;
    "onlyTierZero()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "anyone", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assignOwnership",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyMaxTier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyTierFive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyTierZero",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "anyone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyMaxTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyTierFive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyTierZero",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipGranted(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
}

export class TieredOwnableMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TieredOwnableMockInterface;

  functions: {
    anyone(overrides?: Overrides): Promise<ContractTransaction>;

    "anyone()"(overrides?: Overrides): Promise<ContractTransaction>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOwnerTier(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    onlyMaxTier(overrides?: Overrides): Promise<ContractTransaction>;

    "onlyMaxTier()"(overrides?: Overrides): Promise<ContractTransaction>;

    onlyTierFive(overrides?: Overrides): Promise<ContractTransaction>;

    "onlyTierFive()"(overrides?: Overrides): Promise<ContractTransaction>;

    onlyTierZero(overrides?: Overrides): Promise<ContractTransaction>;

    "onlyTierZero()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  anyone(overrides?: Overrides): Promise<ContractTransaction>;

  "anyone()"(overrides?: Overrides): Promise<ContractTransaction>;

  assignOwnership(
    _address: string,
    _tier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "assignOwnership(address,uint256)"(
    _address: string,
    _tier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getOwnerTier(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onlyMaxTier(overrides?: Overrides): Promise<ContractTransaction>;

  "onlyMaxTier()"(overrides?: Overrides): Promise<ContractTransaction>;

  onlyTierFive(overrides?: Overrides): Promise<ContractTransaction>;

  "onlyTierFive()"(overrides?: Overrides): Promise<ContractTransaction>;

  onlyTierZero(overrides?: Overrides): Promise<ContractTransaction>;

  "onlyTierZero()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    anyone(overrides?: CallOverrides): Promise<boolean>;

    "anyone()"(overrides?: CallOverrides): Promise<boolean>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyMaxTier(overrides?: CallOverrides): Promise<boolean>;

    "onlyMaxTier()"(overrides?: CallOverrides): Promise<boolean>;

    onlyTierFive(overrides?: CallOverrides): Promise<boolean>;

    "onlyTierFive()"(overrides?: CallOverrides): Promise<boolean>;

    onlyTierZero(overrides?: CallOverrides): Promise<boolean>;

    "onlyTierZero()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    OwnershipGranted(
      owner: string | null,
      previousTier: BigNumberish | null,
      newTier: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    anyone(overrides?: Overrides): Promise<BigNumber>;

    "anyone()"(overrides?: Overrides): Promise<BigNumber>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyMaxTier(overrides?: Overrides): Promise<BigNumber>;

    "onlyMaxTier()"(overrides?: Overrides): Promise<BigNumber>;

    onlyTierFive(overrides?: Overrides): Promise<BigNumber>;

    "onlyTierFive()"(overrides?: Overrides): Promise<BigNumber>;

    onlyTierZero(overrides?: Overrides): Promise<BigNumber>;

    "onlyTierZero()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    anyone(overrides?: Overrides): Promise<PopulatedTransaction>;

    "anyone()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "assignOwnership(address,uint256)"(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOwnerTier(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnerTier(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onlyMaxTier(overrides?: Overrides): Promise<PopulatedTransaction>;

    "onlyMaxTier()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    onlyTierFive(overrides?: Overrides): Promise<PopulatedTransaction>;

    "onlyTierFive()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    onlyTierZero(overrides?: Overrides): Promise<PopulatedTransaction>;

    "onlyTierZero()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
