/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { FactoryMock } from "./FactoryMock";

export class FactoryMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factoryManagerAddr: string,
    overrides?: TransactionOverrides
  ): Promise<FactoryMock> {
    return super.deploy(_factoryManagerAddr, overrides) as Promise<FactoryMock>;
  }
  getDeployTransaction(
    _factoryManagerAddr: string,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(_factoryManagerAddr, overrides);
  }
  attach(address: string): FactoryMock {
    return super.attach(address) as FactoryMock;
  }
  connect(signer: Signer): FactoryMockFactory {
    return super.connect(signer) as FactoryMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryMock {
    return new Contract(address, _abi, signerOrProvider) as FactoryMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryManagerAddr",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "batchMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105a03803806105a08339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905561053b806100656000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063731133e91461003b578063b48ab8b6146100fd575b600080fd5b6100fb6004803603608081101561005157600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561008757600080fd5b82018360208201111561009957600080fd5b803590602001918460018302840111600160201b831117156100ba57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102b5945050505050565b005b6100fb6004803603608081101561011357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561013d57600080fd5b82018360208201111561014f57600080fd5b803590602001918460208302840111600160201b8311171561017057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101bf57600080fd5b8201836020820111156101d157600080fd5b803590602001918460208302840111600160201b831117156101f257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561024157600080fd5b82018360208201111561025357600080fd5b803590602001918460018302840111600160201b8311171561027457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103a3945050505050565b6000805460405163731133e960e01b81526001600160a01b03878116600483019081526024830188905260448301879052608060648401908152865160848501528651929094169463731133e9948a948a948a948a9490939260a4019160208601918190849084905b8381101561033657818101518382015260200161031e565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b5050505050505050565b6000809054906101000a90046001600160a01b03166001600160a01b031663b48ab8b6858585856040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610439578181015183820152602001610421565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610478578181015183820152602001610460565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156104b457818101518382015260200161049c565b50505050905090810190601f1680156104e15780820380516001836020036101000a031916815260200191505b50975050505050505050600060405180830381600087803b15801561038557600080fdfea26469706673582212206e50c46d682282e40ab6d0f291083f3773985af62f0c09446b4c97cca07b3c4c64736f6c63430006080033";
