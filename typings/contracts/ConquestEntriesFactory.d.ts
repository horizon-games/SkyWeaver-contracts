/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ConquestEntriesFactoryInterface extends Interface {
  functions: {
    assignOwnership: TypedFunctionDescription<{
      encode([_address, _tier]: [string, BigNumberish]): string;
    }>;

    conquestEntryID: TypedFunctionDescription<{ encode([]: []): string }>;

    getOwnerTier: TypedFunctionDescription<{
      encode([_owner]: [string]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, _from, _ids, _amounts, _data]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([_operator, _from, _id, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    silverRangeMax: TypedFunctionDescription<{ encode([]: []): string }>;

    silverRangeMin: TypedFunctionDescription<{ encode([]: []): string }>;

    skyweaverAssets: TypedFunctionDescription<{ encode([]: []): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    wDaiID: TypedFunctionDescription<{ encode([]: []): string }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient, _data]: [string, Arrayish]): string;
    }>;
  };

  events: {
    OwnershipGranted: TypedEventDescription<{
      encodeTopics([owner, previousTier, newTier]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class ConquestEntriesFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ConquestEntriesFactory;
  attach(addressOrName: string): ConquestEntriesFactory;
  deployed(): Promise<ConquestEntriesFactory>;

  on(event: EventFilter | string, listener: Listener): ConquestEntriesFactory;
  once(event: EventFilter | string, listener: Listener): ConquestEntriesFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ConquestEntriesFactory;
  removeAllListeners(eventName: EventFilter | string): ConquestEntriesFactory;
  removeListener(eventName: any, listener: Listener): ConquestEntriesFactory;

  interface: ConquestEntriesFactoryInterface;

  functions: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    conquestEntryID(): Promise<BigNumber>;

    getOwnerTier(_owner: string): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    silverRangeMax(): Promise<BigNumber>;

    silverRangeMin(): Promise<BigNumber>;

    skyweaverAssets(): Promise<string>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;

    wDaiID(): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  assignOwnership(
    _address: string,
    _tier: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  conquestEntryID(): Promise<BigNumber>;

  getOwnerTier(_owner: string): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  silverRangeMax(): Promise<BigNumber>;

  silverRangeMin(): Promise<BigNumber>;

  skyweaverAssets(): Promise<string>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  wDaiID(): Promise<BigNumber>;

  withdraw(
    _recipient: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipGranted(
      owner: string | null,
      previousTier: BigNumberish | null,
      newTier: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    assignOwnership(_address: string, _tier: BigNumberish): Promise<BigNumber>;

    conquestEntryID(): Promise<BigNumber>;

    getOwnerTier(_owner: string): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    silverRangeMax(): Promise<BigNumber>;

    silverRangeMin(): Promise<BigNumber>;

    skyweaverAssets(): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;

    wDaiID(): Promise<BigNumber>;

    withdraw(_recipient: string, _data: Arrayish): Promise<BigNumber>;
  };
}
