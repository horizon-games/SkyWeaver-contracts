/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BridgeFactoryInterface extends Interface {
  functions: {
    assignOwnership: TypedFunctionDescription<{
      encode([_address, _tier]: [string, BigNumberish]): string;
    }>;

    batchMint: TypedFunctionDescription<{
      encode([_to, _ids, _amounts]: [
        string,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    getAvailableSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    getOwnerTier: TypedFunctionDescription<{
      encode([_owner]: [string]): string;
    }>;

    getPeriodMintLimit: TypedFunctionDescription<{ encode([]: []): string }>;

    getSkyweaverAssets: TypedFunctionDescription<{ encode([]: []): string }>;

    livePeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, , _ids, _amounts]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([, , _id, _amount]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    updatePeriodMintLimit: TypedFunctionDescription<{
      encode([_newPeriodMintLimit]: [BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient, _data]: [string, Arrayish]): string;
    }>;
  };

  events: {
    OwnershipGranted: TypedEventDescription<{
      encodeTopics([owner, previousTier, newTier]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    PeriodMintLimitChanged: TypedEventDescription<{
      encodeTopics([oldMintingLimit, newMintingLimit]: [null, null]): string[];
    }>;
  };
}

export class BridgeFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BridgeFactory;
  attach(addressOrName: string): BridgeFactory;
  deployed(): Promise<BridgeFactory>;

  on(event: EventFilter | string, listener: Listener): BridgeFactory;
  once(event: EventFilter | string, listener: Listener): BridgeFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BridgeFactory;
  removeAllListeners(eventName: EventFilter | string): BridgeFactory;
  removeListener(eventName: any, listener: Listener): BridgeFactory;

  interface: BridgeFactoryInterface;

  functions: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAvailableSupply(): Promise<BigNumber>;

    getOwnerTier(_owner: string): Promise<BigNumber>;

    getPeriodMintLimit(): Promise<BigNumber>;

    getSkyweaverAssets(): Promise<string>;

    livePeriod(): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  assignOwnership(
    _address: string,
    _tier: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  batchMint(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAvailableSupply(): Promise<BigNumber>;

  getOwnerTier(_owner: string): Promise<BigNumber>;

  getPeriodMintLimit(): Promise<BigNumber>;

  getSkyweaverAssets(): Promise<string>;

  livePeriod(): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  updatePeriodMintLimit(
    _newPeriodMintLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipGranted(
      owner: string | null,
      previousTier: BigNumberish | null,
      newTier: BigNumberish | null
    ): EventFilter;

    PeriodMintLimitChanged(
      oldMintingLimit: null,
      newMintingLimit: null
    ): EventFilter;
  };

  estimate: {
    assignOwnership(_address: string, _tier: BigNumberish): Promise<BigNumber>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[]
    ): Promise<BigNumber>;

    getAvailableSupply(): Promise<BigNumber>;

    getOwnerTier(_owner: string): Promise<BigNumber>;

    getPeriodMintLimit(): Promise<BigNumber>;

    getSkyweaverAssets(): Promise<BigNumber>;

    livePeriod(): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      arg4: Arrayish
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      arg4: Arrayish
    ): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish
    ): Promise<BigNumber>;

    withdraw(_recipient: string, _data: Arrayish): Promise<BigNumber>;
  };
}
